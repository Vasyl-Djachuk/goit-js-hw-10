{"version":3,"file":"commonHelpers.js","sources":["../src/js/01-timer.js"],"sourcesContent":["'use strict';\nlet userSelectedDate = 0;\nlet interval;\nconst buttonStart = document.querySelector(`button[data-start]`);\nconst displayTime = document.querySelectorAll(`.value`);\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    if (selectedDates[0].getTime() > Date.now()) {\n      userSelectedDate = selectedDates[0].getTime();\n      buttonStart.classList.add(`is-active`);\n    } else {\n      iziToast.show({\n        message: 'Please choose a date in the future',\n        position: `topCenter`,\n        color: `red`,\n        iconUrl: `../img/cancel_black_24dp.svg`,\n      });\n      buttonStart.classList.remove(`is-active`);\n    }\n  },\n};\n\nconst element = document.querySelector(`#datetime-picker`);\nimport flatpickr from 'flatpickr';\nflatpickr(element, options);\n\nbuttonStart.addEventListener(`click`, () => {\n  let time = userSelectedDate - Date.now();\n  if (buttonStart.classList.contains(`is-active`) && time > 1) {\n    clearInterval(interval);\n    interval = setInterval(() => {\n      const timerTime = convertMs(time);\n\n      [...displayTime].forEach((element, index) => {\n        element.textContent = timerTime[index].toString().padStart(2, 0);\n      });\n\n      if (time < 1000) {\n        iziToast.info({\n          message: 'Time is up',\n          position: `topCenter`,\n        });\n        clearInterval(interval);\n      }\n      time -= 1000;\n    }, 1000);\n    buttonStart.classList.remove(`is-active`);\n  }\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  return [days, hours, minutes, seconds];\n}\n"],"names":["userSelectedDate","interval","buttonStart","displayTime","options","selectedDates","element","flatpickr","time","timerTime","convertMs","index","ms","days","hours","minutes","seconds"],"mappings":"0FACA,IAAIA,EAAmB,EACnBC,EACJ,MAAMC,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAc,SAAS,iBAAiB,QAAQ,EAChDC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,EAAE,EACxBA,EAAc,GAAG,QAAO,EAAK,KAAK,OACpCL,EAAmBK,EAAc,GAAG,QAAO,EAC3CH,EAAY,UAAU,IAAI,WAAW,IAErC,SAAS,KAAK,CACZ,QAAS,qCACT,SAAU,YACV,MAAO,MACP,QAAS,8BACjB,CAAO,EACDA,EAAY,UAAU,OAAO,WAAW,EAE3C,CACH,EAEMI,EAAU,SAAS,cAAc,kBAAkB,EAEzDC,EAAUD,EAASF,CAAO,EAE1BF,EAAY,iBAAiB,QAAS,IAAM,CAC1C,IAAIM,EAAOR,EAAmB,KAAK,IAAG,EAClCE,EAAY,UAAU,SAAS,WAAW,GAAKM,EAAO,IACxD,cAAcP,CAAQ,EACtBA,EAAW,YAAY,IAAM,CAC3B,MAAMQ,EAAYC,EAAUF,CAAI,EAEhC,CAAC,GAAGL,CAAW,EAAE,QAAQ,CAACG,EAASK,IAAU,CAC3CL,EAAQ,YAAcG,EAAUE,GAAO,SAAQ,EAAG,SAAS,EAAG,CAAC,CACvE,CAAO,EAEGH,EAAO,MACT,SAAS,KAAK,CACZ,QAAS,aACT,SAAU,WACpB,CAAS,EACD,cAAcP,CAAQ,GAExBO,GAAQ,GACT,EAAE,GAAI,EACPN,EAAY,UAAU,OAAO,WAAW,EAE5C,CAAC,EAED,SAASQ,EAAUE,EAAI,CAKrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAClE,MAAO,CAACC,EAAMC,EAAOC,EAASC,CAAO,CACvC"}